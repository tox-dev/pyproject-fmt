requires = ["tox>=4.22"]
env_list = ["fix", "3.13", "3.12", "3.11", "3.10", "3.9", "type"]
skip_missing_interpreters = true

[env_run_base]
description = "run the tests with pytest under {env_name}"
package = "wheel"
wheel_build_env = ".pkg"
dependency_groups = ["test"]
pass_env = ["PYTEST_*", "SSL_CERT_FILE", "GITHUB_ACTIONS"]
set_env.COVERAGE_FILE = { replace = "env", name = "COVERAGE_FILE", default = "{work_dir}{/}.coverage.{env_name}" }
set_env.COVERAGE_FILECOVERAGE_PROCESS_START = "{tox_root}{/}pyproject.toml"
commands = [
  [
    "pytest",
    { replace = "posargs", extend = true, default = [
      "--durations",
      "5",
      "--junitxml",
      "{work_dir}{/}junit.{env_name}.xml",
      "--no-cov-on-fail",
      "--cov",
      "{tox_root}{/}tests",
      "--cov-config",
      "{tox_root}{/}pyproject.toml",
      "--cov-context",
      "test",
      "--cov-report",
      "term-missing:skip-covered",
      "--cov-report",
      "html:{env_tmp_dir}{/}htmlcov",
      "--cov-report",
      "xml:{work_dir}{/}coverage.{env_name}.xml",
      "tests",
    ] },
  ],
]

[env.fix]
description = "format the code base to adhere to our styles, and complain about what we cannot do automatically"
skip_install = true
dependency_groups = ["fix"]
pass_env = [{ replace = "ref", of = ["env_run_base", "pass_env"], extend = true }, "PROGRAMDATA"]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure", { replace = "posargs", extend = true }]]

[env.type]
description = "run type check on code base"
dependency_groups = ["type"]
commands = [["mypy", "tasks", "tests"]]

[env.dev]
description = "dev environment with all deps at {envdir}"
package = "editable"
dependency_groups = ["dev"]
commands = [["uv", "pip", "tree"], ["python", "-c", 'print(r"{env_python}")']]
